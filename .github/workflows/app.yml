
name: webapp-actions
on:
  push:
    branches:
        - main
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  TMDB_V3_API_KEY: ${{ secrets.TMDB_V3_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REGISTRY: ${{ secrets.REGISTRY }}

jobs:
  code_analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

  BuildandPush:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}

      - name: Build and push Docker image
        run: |
          cd ./app
          docker build --build-arg TMDB_V3_API_KEY="${{ env.TMDB_V3_API_KEY }}" -t ${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }} .
          docker push ${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
  
  DeployToEKS:
    needs: BuildandPush
    runs-on: ubuntu-latest
    steps:
        - name: Checkout source code
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Get Kubernetes config
          id: getconfig
          run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

        - name: Login to ECR
          run: |
            kubectl get secret regcred || \
            kubectl create secret docker-registry regcred \
              --docker-server=${{ env.REGISTRY }} \
              --docker-username=AWS \
              --docker-password=$(aws ecr get-login-password)
        - name: Create API key secret
          run: |
            kubectl create secret generic netflix-app-secrets \
              --from-literal=tmdb-api-key="${{ env.TMDB_V3_API_KEY }}" \
              --dry-run=client -o yaml | kubectl apply -f -
        - name: Update deployment image
          run: |
            sed -i "s|REGISTRY_PLACEHOLDER|${{ env.REGISTRY }}|g" ./app/k8-Manifest/deployment.yml
            sed -i "s|REPO_PLACEHOLDER|${{ env.ECR_REPOSITORY }}|g" ./app/k8-Manifest/deployment.yml
            sed -i "s|BUILD_NUMBER_PLACEHOLDER|${{ github.run_number }}|g" ./app/k8-Manifest/deployment.yml
        - name: Deploy Kubernetes manifests
          run: |
            kubectl apply -f ./app/k8-Manifest/deployment.yml
            kubectl apply -f ./app/k8-Manifest/service.yml
           
        - name: Wait for deployment to be ready
          run: |
            kubectl rollout status deployment/netflix-app --timeout=300s || exit 1
            kubectl get pods
            
       